@startuml

skinparam {
    monochrome true
    classFontSize 20
    classAttributeFontSize 20
    defaultFontName Courier
}

interface Call << (I,empty) Interface >> {
    Load(*memoryStorage, []naubuddy.FullCallListLeg)
    UpdateData(call *naubuddy.FullCallsListCall, timestamp int64)
    ProjectIDChanged() bool
    SpawnInboundCall() Call
    OnCallEnd(endTimestamp int64)
}

class callInfoBase << (S,empty) Structure >> {
    ~sessionID string

    ~projectID         string
    ~createdTS         int64
    ~endedTS           int64
    ~targetServiceTime int64

    ~threshold int

    ~legs legsCollection

    ~projectIDChanged bool

    ~cached bool

    ~model *ProjectModelRedis

    ~spawnIgnoreLegBaseId string

    ~blocked    bool
    ~pmsProject string

    __ implement Call __
    +Load(storage *memoryStorage, legsData []naubuddy.FullCallListLeg)
    +UpdateData(call *naubuddy.FullCallsListCall, timestamp int64)
    +ProjectIDChanged() bool
    +SpawnInboundCall() Call
    +OnCallEnd(endedTS int64)
    ..
    ~cacheCall(callType CallType)
    ~allLegsEnded()
    ~isStarted()
    ~isEnded()
    ~updateParams(params *naubuddy.FullCallListParams)
}

callInfoBase --|> Call
callInfoBase --o legsCollection

enum callState << (E,empty) Enum >> {
    Undefined
    Blocked
    Queued
    Callback
    Unblocked
    Connected
    Ended
}

class InnerCallInfo << (S,empty) Structure >> {
    __ Override __
    UpdateData(call *naubuddy.FullCallsListCall, timestamp int64)
}

InnerCallInfo --* callInfoBase

class OutboundCallInfo << (S,empty) Structure >> {
    ~queuedTS            int64
    ~unblockedTS         int64
    ~connectedTS         int64
    ~callbackRequestedTS int64

    ~ignoreLegBaseID string

    ~ivrLeg    *legInfo
    ~agentLeg  *legInfo
    ~lastState callState

    ~strict bool

    __ Override __
    +UpdateData(call *naubuddy.FullCallsListCall, timestamp int64)
    +OnCallEnd(endedTS int64)

    .. Update State ..
    ~processEvent(call *naubuddy.FullCallsListCall, timestamp int64)
    ~processProjectID(params *naubuddy.FullCallListParams, timestamp int64)
    ~extractProjectID(params *naubuddy.FullCallListParams) (string, bool)
    ~processUnblocked(timestamp int64)
    ~processConnected(timestamp int64)
    ~processEnded(endedTS int64)
    ~onProjectIDChanged()

    .. State Machine ..
    ~cleanLastState(lastState callState)
    ~markCallQueued()
    ~markCallUnblocked()
    ~markCallConnected()
    ~markCallEnded()

    .. Collect data to DB ..
    ~collect() *db.OutboundCallData
    ~isUnblocked() bool
    ~isProcessed() bool
    ~holdDuration() int64
    ~avgSpeedAnswer() int64
    ~rt() int64
    ~talkTime() int64
    ~startedTS() int64
    ~usesQueue() bool
    ~externalNumber() string
    ~isExternalConnected() bool
    ~externalConnectedTime() int64
    ~isAbandoned() bool
    ~disconnectReason() *string

    .. Other ..
    ~getIVRLeg() *legInfo
    ~getAgentLeg() *legInfo
    ~hasAgentLeg() bool
    ~externalLeg() *legInfo
    ~agentConnected() string
}

OutboundCallInfo --* callInfoBase
OutboundCallInfo --o legInfo

class InboundCallInfo << (S,empty) Structure >> {
    ~queuedTS            int64
    ~unblockedTS         int64
    ~connectedTS         int64
    ~callbackRequestedTS int64

    ~ignoreLegBaseID string

    ~ivrLeg    *legInfo
    ~agentLeg  *legInfo
    ~lastState callState

    __ Override __
    +UpdateData(call *naubuddy.FullCallsListCall, timestamp int64)
    +OnCallEnd(endedTS int64)

    .. Update State ..
    ~processEvent(call *naubuddy.FullCallsListCall, timestamp int64)
    ~processProjectID(params *naubuddy.FullCallListParams, timestamp int64)
    ~processBlocked()
    ~processUnblocked(timestamp int64)
    ~processConnected(timestamp int64)
    ~processEnded(endedTS int64)
    ~processCallback(params *naubuddy.FullCallListParams, timestamp int64)
    ~onProjectIDChanged()

    .. State Machine ..
    ~cleanLastState(lastState callState)
    ~markCallAsBlocked()
    ~markCallAsQueued()
    ~markCallAsUnblocked()
    ~markCallAsConnected()
    ~markCallAsEnded()
    ~markCallAsCallback()

    .. Collect data to DB ..
    ~collect() *db.InboundCallData
    ~isProcessed() bool
    ~getAgentLeg() *legInfo
    ~isProcessedAfterThreshold() bool
    ~sumCallsDurationAppendix() int64
    ~holdDuration() int64
    ~isUnblocked() bool
    ~avgSpeedAnswer() int64
    ~rt() int64
    ~talkTime() int64
    ~startedTS() int64
    ~hasAgentLeg() bool
    ~usesQueue() bool
    ~isAbandoned() bool
    ~isAbandonedOnIVR() bool
    ~isAbandonedOnHold() bool
    ~isShortlyAbandoned() bool
    ~isAbandonedAfterThreshold() bool
    ~agentConnected() string

    .. Other ..
    ~isInIVR() bool
    ~isBlocked() bool
    ~activeAgentLeg() *legInfo
    ~isWaiting() bool
    ~isConnected() bool
    ~externalNumber() string
    ~externalLeg() *legInfo
    ~getIVRLeg() *legInfo
}

InboundCallInfo --* callInfoBase
InboundCallInfo --o legInfo

class legsCollection << (S,empty) Structure >> {
    ~sessionID string
    ~legs      []legInfo

    +UpdateLegs(storage *memoryStorage, legsData []naubuddy.FullCallListLeg)
    +Copy() legsCollection
    +Collect() []*db.LegData

    ~firstLeg() (*legInfo, error)
    ~firstIVRLeg() *legInfo
    ~hasAgentLeg(excludeUUID string) bool
    ~firstAgentLeg(excludeUUID string, outbound bool) *legInfo
    ~firstActiveLeg() *legInfo
    ~lastOutgoingLeg() *legInfo
    ~onCallEnd(endedTS int64)
    ~areAllLegsEnded() bool
    ~size() int
}

legsCollection --o legInfo

class legInfo << (S,empty) Structure >> {
    ~uuid string

    ~sourceAbonent string
    ~sourceID      string

    ~distAbonent string
    ~distID      string

    ~createdTS   int64
    ~connectedTS int64
    ~endedTS     int64

    ~disconnectReason string
    ~direction        string

    ~state string

    ~storage *memoryStorage

    ~updateData(legData *naubuddy.FullCallListLeg)
    ~isIVR() bool
    ~isToAgent() bool
    ~isFromAgent() bool
    ~isOutgoing() bool
    ~isConnected() bool
    ~isRinging() bool
    ~duration() int64
    ~pickupInterval() int64
    ~isEnded() bool

    ~collect(sessionID string) *db.LegData
}

hide interface fields
hide enum methods

@enduml